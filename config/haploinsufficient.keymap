/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&sk {
    release-after-ms = <750>;
    quick-release;
};

&caps_word {
    continue-list = <DEL MINUS BSPC>;
};

#define QWERT_L 0
#define NUM_L   1
#define SYM_L   2
#define NAV_L   3
//#define FUN_L   4

#define MY_COPY LC(INSERT)
#define MY_PASTE LS(INSERT)
#define VI_U LC(Z)
#define VI_W LC(RIGHT)
#define VI_B LC(LEFT)

/ {
    combos {
        compatible = "zmk,combos";

    // shortcut
    #define COMBO(NAME, BINDINGS, KEYPOS, TIMEOUT) \
          combo_##NAME { \
            timeout-ms = <TIMEOUT>; \
            bindings = <BINDINGS>; \
            key-positions = <KEYPOS>; \
          };

        /*                KEY POSITIONS

          ╭────────────────────╮ ╭────────────────────╮
          │  0   1   2   3   4 │ │  5   6   7   8   9 │
          │ 10  11  12  13  14 │ │ 15  16  17  18  19 │
          │ 20  21  22  23  24 │ │ 25  26  27  28  29 │
          ╰───────╮ 30  31  32 │ │ 33  34  35 ╭───────╯
                  ╰────────────╯ ╰────────────╯        */


        COMBO(colon, &kp COLON, 7 8, 60)
        COMBO(semicolon, &kp SEMI, 18 19, 60)
        COMBO(slash, &kp FSLH, 1 2, 60)
        COMBO(escape, &kp ESC, 0 1, 60)
        COMBO(minus, &kp MINUS, 31 32, 60)
        COMBO(underscore, &kp UNDER, 32 33, 60)
	COMBO(capslock, &caps_word, 20 21, 60)

        COMBO(reset_left, &bootloader, 0 1 2 3, 100)
        COMBO(reset_right, &bootloader, 6 7 8 9, 100)
    };

    behaviors {
        lhm: left_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <125>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
            // hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 30 31 32 33 34 35>;
            hold-trigger-key-positions = <5 6 7 8 9 10 11 12 13 15 16 17 18 19 25 26 27 28 29 30 31 32 33 34 35>;
        };

        rhm: right_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <125>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
            // hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33 34 35>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 16 17 18 19 20 21 22 23 24 30 31 32 33 34 35>;
        };

        base_lt: base_layer_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "BASE_LAYER_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <75>;
            global-quick-tap;
            bindings = <&mo>, <&kp>;
        };

    };

	keymap {
		compatible = "zmk,keymap";

        // QWERTY
		qwert_layer {
			bindings = <
                   &mt TAB Q    &mt AT W      &kp E         &kp R              &kp T              &kp Y               &kp U            &kp I                 &kp O         &kp P
                   &kp A        &kp S         &kp D         &kp F              &kp G              &kp H               &kp J            &kp K                 &kp L         &kp SEMI
                   &mt LSHFT Z  &kp X         &kp C         &kp V              &kp B              &kp N               &kp M            &kp COMMA             &kp DOT       &mt RSHFT QMARK
				 /*&            &*/      &kp LCTRL          &kp LALT        &base_lt SYM_L RET    &kp RCMD  &base_lt NUM_L SPACE    &base_lt NAV_L BSPC     /*  &             &*/
			>;
		};

		num_layer {
			bindings = <
                   &kp N1       &kp N2        &kp N3        &kp N4             &kp N5             &kp N6              &kp N7           &kp N8                   &kp N9        &kp N0
                   &lhm LALT N3 &lhm LSHFT N2 &lhm LCTRL N1 &lhm LCMD N0       &kp N4             &kp PLUS            &kp MINUS        &kp EQUAL                &kp N8        &kp N9
                   &kp FSLH     &kp PLUS      &kp MINUS     &kp STAR           &trans             &trans              &trans           &kp COMMA                &kp DOT       &kp FSLH
				 /*&            &*/           &trans        &trans             &trans             &trans              &trans           &trans    /*             &             &*/
			>;
		};

		sym_layer {
			bindings = <
                   &kp EXCL     &kp AT        &kp BSLH      &kp DLLR           &kp PRCNT          &trans              &kp TILDE        &kp EQUAL                &kp RPAR      &kp LPAR
                   &kp HASH     &kp LT        &kp MINUS     &kp GT             &kp GRAVE          &kp AMPS            &kp LBRC         &kp RBRC                 &trans        &trans
                   &kp FSLH     &kp PLUS      &kp CARET     &kp STAR           &kp UNDER          &kp PRCNT           &trans           &kp LBKT                 &kp RBKT      &trans
				 /*&            &*/           &trans        &trans             &trans             &trans              &trans           &trans    /*             &             &*/
			>;
		};

		nav_layer {
			bindings = <
                   &bt BT_CLR       &trans        &kp MY_COPY   &trans             &kp MY_PASTE       &trans              &kp C_BRI_DEC    &kp C_BRI_INC            &kp VI_U      &bootloader
                   &kp END      &kp C_NEXT    &kp C_PP      &kp C_VOL_UP       &kp DEL            &kp LEFT            &kp DOWN         &kp UP                   &kp RIGHT     &kp HOME
                   &trans       &kp C_PREV    &kp C_MUTE    &kp C_VOL_DN       &kp UNDER          &kp VI_B            &kp PG_DN        &kp PG_UP                &kp VI_W      &trans
				 /*&            &*/         &bt BT_SEL 0    &bt BT_SEL 1       &bt BT_SEL 2       &bt BT_PRV          &bt BT_NXT       &trans    /*            &             &*/
			>;
		};
	};
};
